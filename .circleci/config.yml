# Config for CircleCI
# See https://circleci.com/docs/configuration-reference
#
# This config has a single workflow, 'build-test-deploy', which goes as follows:
# 1. 'build-test-linux-amd64': Builds Docker image from SDPB sources (using ./Dockerfile) for AMD64 platform and run tests
# 2. 'build-test-linux-arm64': same for ARM64
# 3. 'deploy-master': On each 'master' branch update, build a multiplatform image (working for both AMD64 and ARM64)
#     and push it to DockerHub as '${DOCKER_USERNAME}/sdpb:master', e.g. 'davidsd/sdpb:master'.
# 4. 'deploy-tag': If new tag is pushed to the repo, build and push the multiplatform image
#    '${DOCKER_USERNAME}/sdpb:${TAG}', e.g. 'davidsd/sdpb:3.0.0'
# In steps 3 and 4, separate images for each platform are also pushed,
#   e.g. davidsd/sdpb:master-amd64 and davidsd/sdpb:master-arm64.
#   (TODO: this is necessary to push a multiplatform image, in principle we could delete them later.
#    Or we could find a way not to push them, e.g. using docker buildx - but I found that complicated)
#
# Deploy works only if you specify DOCKER_USERNAME and DOCKER_PASSWORD environment variables for the CircleCI project
# See instructions here:
# https://docs.docker.com/docker-hub/access-tokens/#create-an-access-token
# https://circleci.com/docs/set-environment-variable/#set-an-environment-variable-in-a-project

version: 2.1

# Reusable commands
# See https://circleci.com/docs/reusing-config/
commands:

  docker-build-test:
    description: Build and test Docker image for platform
    parameters:
      # linux/amd64, linux/arm64
      # Run 'docker buildx ls' to see all available platforms
      platform:
        type: string
      # Docker image tag, e.g. tag=amd64 -> image sdpb:amd64, sdpb-test:amd64
      # We cannot use platform name as a tag because it contains slashes
      tag:
        type: string
    steps:
      - checkout
      - run: uname -m
      - run:
          name: Docker build sdpb
          command: |
            docker build . --platform << parameters.platform >> --tag sdpb:<< parameters.tag >>
      - run:
          name: Run tests
          # --cap-add=SYS_PTRACE is a workaround for https://github.com/open-mpi/ompi/issues/4948
          command: |
            docker build . --platform << parameters.platform >> --tag sdpb-test --target test
            docker run --cap-add=SYS_PTRACE sdpb:<< parameters.tag >> uname -m
            docker run --cap-add=SYS_PTRACE sdpb:<< parameters.tag >> sdpb --help
            docker run --cap-add=SYS_PTRACE sdpb-test ./test/run_all_tests.sh
      - run:
          name: Save image to workspace
          command: |
            mkdir -p images/<< parameters.platform >>
            docker image save -o "images/<< parameters.platform >>/sdpb" sdpb:<< parameters.tag >>
      - persist_to_workspace:
          root: .
          paths:
            - images

  docker-load:
    description: Load docker image created via docker-build step
    parameters:
      platform:
        type: string
    steps:
      - attach_workspace:
          at: .
      - run: docker image load < "images/<< parameters.platform >>/sdpb"

  docker-build-push-multiplatform:
    description: Build and push image for linux/amd64 and linux/arm64 platforms
    parameters:
      full-name:
        type: string
    steps:
      # AMD64
      - docker-load:
          platform: linux/amd64
      - run: |
          docker tag sdpb:amd64 << parameters.full-name >>-amd64
      # ARM64
      - docker-load:
          platform: linux/arm64
      - run: |
          docker tag sdpb:arm64 << parameters.full-name >>-arm64
      # Combine into multiplatform
      - run:
          name: Build and push multiplatform Docker image
          command: |
            echo << parameters.full-name >>
            docker login --username ${DOCKER_USERNAME} --password ${DOCKER_PASSWORD}
            export NAME_AMD64=<< parameters.full-name >>-amd64
            export NAME_ARM64=<< parameters.full-name >>-arm64
            export NAME_MULTI=<< parameters.full-name >>
            docker tag sdpb:amd64 ${NAME_AMD64}
            docker tag sdpb:arm64 ${NAME_ARM64}
            docker push ${NAME_AMD64}
            docker push ${NAME_ARM64}
            docker manifest create ${NAME_MULTI} --amend ${NAME_AMD64} --amend ${NAME_ARM64}
            docker manifest push ${NAME_MULTI}
      - run: docker run << parameters.full-name >> uname -m
      - run: docker run << parameters.full-name >> sdpb --help

  docker-deploy:
    description: Push image to DockerHub
    parameters:
      tag:
        type: string
    steps:
      # Do not deploy anything for forked PRs
      # (i.e. PR from someuser/sdpb/master to upstream/sdpb/master shouldn't trigger 'deploy-master' job and docker-push to upstream/sdpb:master)
      # https://circleci.com/docs/configuration-reference/#ending-a-job-from-within-a-step
      # https://circleci.com/docs/variables/#built-in-environment-variables
      - run: |
          if [ -n "$CIRCLE_PR_NUMBER" ]; then
            echo "Deploy for forked PRs is disabled"
            circleci-agent step halt 
          fi
      - docker-build-push-multiplatform:
          full-name: ${DOCKER_USERNAME}/sdpb:<< parameters.tag >>

# Jobs to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:

  build-test-linux-amd64:
    machine:
      image: ubuntu-2004:current
    resource_class: large
    steps:
      - docker-build-test:
          platform: linux/amd64
          tag: amd64

  build-test-linux-arm64:
    machine:
      image: ubuntu-2004:current
    resource_class: arm.large
    steps:
      - docker-build-test:
          platform: linux/arm64
          tag: arm64
  
  # TODO MacOS M1 will be available on free plan after 24 Jun 2024
  #  build-macos-m1:
  #    macos:
  #      xcode: 15.3.0
  #    resource_class: macos.m1.medium.gen1
  #    steps:
  #      - docker-build-test:
  #          platform: linux/arm64
  #          tag: arm64

  # Test deploy process for local registry
  # TODO:docker manifest push works for DockerHub, but fails for local registry.
  # So we have to disable this step.
  deploy-local-registry:
    docker:
      - image: cimg/base:stable
    steps:
      - setup_remote_docker
      - run:
          name: Create local Docker registry
          command: docker run -d -p 5000:5000 --restart=always --name registry registry:2.8
      - docker-build-push-multiplatform:
          full-name: localhost:5000/sdpb:multiplatform

  deploy-master:
    docker:
      - image: cimg/base:stable
    steps:
      - setup_remote_docker
      - docker-deploy:
          tag: master

  deploy-tag:
    docker:
      - image: cimg/base:stable
    steps:
      - setup_remote_docker
      - docker-deploy:
          tag: ${CIRCLE_TAG}

# Workflows to be executed
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  build-test-deploy:
    jobs:

      - build-test-linux-amd64:
          filters:
            tags:
              only: /^\d+\.\d+\.\d+$/

      - build-test-linux-arm64:
          filters:
            tags:
              only: /^\d+\.\d+\.\d+$/

      - deploy-master:
          filters:
            branches:
              only: master
          requires:
            - build-test-linux-amd64
            - build-test-linux-arm64

      - deploy-tag:
          filters:
            tags:
              only: /^\d+\.\d+\.\d+$/ # only release tags, e.g 3.0.0
            # See https://discuss.circleci.com/t/tag-not-triggered-by-circleci-not-filter-in-workflow/32036
            branches:
              ignore: /.*/ # Ignore all branches, otherwise the job is triggered by any git push
          # NB: you have to specify tags filter for all dependencies,
          # See https://circleci.com/docs/configuration-reference/#tags
          requires:
            - build-test-linux-amd64
            - build-test-linux-arm64