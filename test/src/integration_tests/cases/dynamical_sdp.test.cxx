#include "integration_tests/common.hxx"

#include <filesystem>

namespace fs = std::filesystem;

using namespace std::string_literals;
using Named_Args_Map = Test_Util::Test_Case_Runner::Named_Args_Map;
using Test_Case_Runner = Test_Util::Test_Case_Runner;

TEST_CASE("dynamical_sdp")
{
  INFO("Test for Skydiving algorithm step. "
       "May take about 5 minutes to finish.");
  INFO("Data generated by skydiving_binary_sdp branch "
       "on Expanse HPC with precision=768");

  Test_Case_Runner runner("dynamical_sdp");
  auto data_dir = runner.data_dir;
  auto output_dir = runner.output_dir;

  constexpr int num_proc = 6;
  // The test is big, we use lower precision to run it faster
  constexpr unsigned int precision = 320;
  // Conservative estimate for diff
  constexpr unsigned int diff_precision = precision / 2;

  auto new_sdp_file_list_nsv = output_dir / "sdp" / "file_list.nsv";

  {
    INFO("run sdpinput");
    for(const std::string sdp_name : {"zero", "plus_0"})
      {
        CAPTURE(sdp_name);
        Named_Args_Map named_args{
          {"--precision", std::to_string(precision)},
          {"--input", data_dir / "json" / sdp_name / "file_list.nsv"},
          {"--output", output_dir / "sdp" / (sdp_name + ".zip")},
        };
        runner.create_nested("sdp2input-"s + sdp_name)
          .mpi_run({"build/sdp2input"}, named_args, num_proc);
      }
    std::ofstream nsv(new_sdp_file_list_nsv);
    // null-separated list of all new sdps except for "zero"
    nsv << "plus_0.zip";
  }

  {
    INFO("Run dynamical_sdp");
    auto args
      = "--checkpointInterval 3600 --maxRuntime 3600 "
        "--dualityGapThreshold 1.0e-30 --primalErrorThreshold 1.0e-30 "
        "--dualErrorThreshold 1.0e-30  --initialMatrixScalePrimal 1.0e30 "
        "--initialMatrixScaleDual 1.0e30 --feasibleCenteringParameter 0.1 "
        "--infeasibleCenteringParameter 0.3 --stepLengthReduction 0.7 "
        "--maxComplementarity 1.0e100 --maxIterations 1000 --verbosity 2 "
        "--procGranularity 1 --writeSolution x,y,z --numExternalParams 1 "
        "--externalParamInfinitestimal 1.0e-20 --centeringRThreshold 1.0e-20 "
        "--dualityGapUpperLimit 0.1 --betaScanMin 0.1 --betaScanMax 1.01 "
        "--betaScanStep 0.1 --stepMinThreshold 0.1 --stepMaxThreshold 0.6 "
        "--primalDualObjWeight 0.2 --maxClimbingSteps 1 --betaClimbing 2.0 "
        "--navigatorWithLogDetX False --gradientWithLogDetX True "
        "--finiteDualityGapTarget 0.0 --totalIterationCount 0 "
        "--boundingBoxMax 0.523 --boundingBoxMin 0.515 "
        "--useExactHessian False --prevHessianBFGS 1.0 "
        "--maxSharedMemory 1G";

    Named_Args_Map named_args{
      {"--precision", std::to_string(precision)},
      {"--sdpDir", output_dir / "sdp/zero.zip"},
      {"--outDir", output_dir / "out"},
      {"--checkpointDir", output_dir / "ck"},
      {"--newSdpDirs", new_sdp_file_list_nsv},
    };
    runner.create_nested("dynamical_sdp_RV1B")
      .mpi_run({"build/dynamical_sdp_RV1B", args}, named_args, num_proc);

    Test_Util::REQUIRE_Equal::diff_sdpb_output_dir(
      named_args["--outDir"], data_dir / "out", precision, diff_precision);
  }
}
